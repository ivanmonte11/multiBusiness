// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  category  String   // Rubro del negocio
  createdAt DateTime @default(now())
  phone     String?
  email     String?  
  address   String? 
  // DATOS FISCALES BÁSICOS:
  taxId     String?  // CUIT/CUIL (obligatorio para facturas)
  updatedAt DateTime @updatedAt

  users     User[]
  products  Product[]
  sales     Sale[] 
  customers Customer[]
  refunds   Refund[]
  
  @@map("tenants")
}

// Modelos para NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  emailVerified DateTime?
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
   sales         Sale[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  cost        Decimal?     // Precio de costo
  quantity    Int
  barCode     String?  @unique
  sku         String?  @unique
  category    String
  image       String?     // URL de imagen
  weight      Decimal?    // Peso en kg
  dimensions  String?     // Dimensiones (20x30x15 cm)
  isActive    Boolean @default(true)
  lowStockThreshold Int @default(5) // Alerta de stock bajo
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  saleItems   SaleItem[]
  refundItems RefundItem[]

  @@map("products")
}

model Sale {
  id          String   @id @default(cuid())
  saleNumber  String   @unique
  total       Decimal
  status      SaleStatus @default(COMPLETED)
  paymentMethod PaymentMethod
  transferReference String?      
  transferBank     String?   
  paymentNote      String?     
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items       SaleItem[]
  refunds      Refund[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sales")
}

model Refund {
  id           String   @id @default(cuid())
  refundNumber String   @unique
  total        Float
  status       String   @default("COMPLETED") // Simple string para evitar enum
  createdAt    DateTime @default(now())
  
  // Relaciones
  saleId       String
  sale         Sale     @relation(fields: [saleId], references: [id])
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  items        RefundItem[]
  
  @@map("refunds")
}

model RefundItem {
  id        String  @id @default(cuid())
  quantity  Int
  unitPrice Decimal
  subtotal  Decimal
  
  // Relaciones
  refundId  String
  refund    Refund  @relation(fields: [refundId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("refund_items")
}

model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  unitPrice   Decimal
  subtotal    Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sale_items")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?  @unique
  phone       String?
  address     String?
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sales       Sale[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customers")
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  OTHER
}

// Agregar más modelos después (categorías, proveedores, etc.)